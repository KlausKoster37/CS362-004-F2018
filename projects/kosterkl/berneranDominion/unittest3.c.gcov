        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: unittest1.c
        -:    4:* Function under test: supplyCount()
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:
        -:   21:/************************************************************
        -:   22:                supplyCount()
        -:   23:
        -:   24:Expected behavior: returns number of a specific card remaining in the supply
        -:   25:
        -:   26:Input:
        -:   27:    int card
        -:   28:    struct gameState *state
        -:   29:
        -:   30:Output:
        -:   31:    integer value of the number of X cards remaining in the supply
        -:   32:************************************************************/
        -:   33:
        -:   34:#define TESTFUNCTION "supplyCount()"
        -:   35:
        -:   36:// global easy testing arrays
        -:   37:char* gameCardNames[treasure_map + 1];
        -:   38:
        -:   39:// modified assert from cardtests due to the before/after not being necessary.
        -:   40:void asserttrue(int value, char* test, int arrayValue, int functionValue);
        -:   41:
function main called 1 returned 100% blocks executed 100%
        1:   42:int main(int argc, char* argv[])
        -:   43:{
        -:   44:    // setup variables
        -:   45:    struct gameState state;
        1:   46:    int k[10] = { adventurer, council_room, cutpurse, embargo, gardens, minion, mine, village, smithy, tribute };
        1:   47:    int numPlayers = 2;
        1:   48:    int seed = 1000;
        -:   49:
        1:   50:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
call    0 returned 100%
        1:   51:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:   52:
        -:   53:    // setup names
        1:   54:    gameCardNames[0] = "curse";
        1:   55:    gameCardNames[1] = "estate";
        1:   56:    gameCardNames[2] = "duchy";
        1:   57:    gameCardNames[3] = "province";
        1:   58:    gameCardNames[4] = "copper";
        1:   59:    gameCardNames[5] = "silver";
        1:   60:    gameCardNames[6] = "gold";
        1:   61:    gameCardNames[7] = "adventurer";
        1:   62:    gameCardNames[8] = "council_room";
        1:   63:    gameCardNames[9] = "feast";
        1:   64:    gameCardNames[10] = "gardens";
        1:   65:    gameCardNames[11] = "mine";
        1:   66:    gameCardNames[12] = "remodel";
        1:   67:    gameCardNames[13] = "smithy";
        1:   68:    gameCardNames[14] = "village";
        1:   69:    gameCardNames[15] = "baron";
        1:   70:    gameCardNames[16] = "great_hall";
        1:   71:    gameCardNames[17] = "minion";
        1:   72:    gameCardNames[18] = "steward";
        1:   73:    gameCardNames[19] = "tribute";
        1:   74:    gameCardNames[20] = "ambassador";
        1:   75:    gameCardNames[21] = "cutpurse";
        1:   76:    gameCardNames[22] = "embargo";
        1:   77:    gameCardNames[23] = "outpost";
        1:   78:    gameCardNames[24] = "salvager";
        1:   79:    gameCardNames[25] = "sea_hag";
        1:   80:    gameCardNames[26] = "treasure_map";
        -:   81:
        -:   82:    // initialize the game
        1:   83:    initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:   84:
        -:   85:    // test all supply counts
        -:   86:    int i;
       28:   87:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   88:    {
       27:   89:        state.supplyCount[i] = i + 7;
       27:   90:        asserttrue(supplyCount(i, &state) == (i + 7), gameCardNames[i], state.supplyCount[i], supplyCount(i, &state));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   91:    }
        -:   92:
        1:   93:    return 0;
        -:   94:}
        -:   95:
        -:   96:
function asserttrue called 27 returned 100% blocks executed 60%
       27:   97:void asserttrue(int value, char* test, int arrayValue, int functionValue)
        -:   98:{
       27:   99:    if (value)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  100:    {
       27:  101:        printf("Test: %s successful!\n", test);
call    0 returned 100%
       27:  102:        printf("\tSupply Count Array: %d\tFunction: %d\n", arrayValue, functionValue);
call    0 returned 100%
       27:  103:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  104:    }
        -:  105:    else
        -:  106:    {
    #####:  107:        printf("Test: %s failed!\n", test);
call    0 never executed
    #####:  108:        printf("\tSupply Count Array: %d\tFunction: %d\n", arrayValue, functionValue);
call    0 never executed
    #####:  109:        fflush(stdout);
call    0 never executed
call    1 never executed
        -:  110:    }
       27:  111:}
