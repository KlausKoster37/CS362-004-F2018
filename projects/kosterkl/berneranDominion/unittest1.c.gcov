        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: unittest1.c
        -:    4:* Function under test: isGameOver()
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:#include <time.h>
        -:   20:
        -:   21:/************************************************************
        -:   22:                isGameOver()
        -:   23:
        -:   24:Expected behavior: returns 1 if game is over, else returns 0
        -:   25:    Note: function checks if province count is zero and (or in terms of the game) if 3 supply piles are zero
        -:   26:
        -:   27:Input:
        -:   28:    struct gameState *state
        -:   29:
        -:   30:Output:
        -:   31:    int (return)
        -:   32:************************************************************/
        -:   33:
        -:   34:#define TESTFUNCTION "isGameOver()"
        -:   35:
        -:   36:// modified assert from cardtests due to the before/after not being necessary.
        -:   37:void asserttrue(int value, char* test);
        -:   38:
        -:   39:
function main called 1 returned 100% blocks executed 100%
        1:   40:int main(int argc, char* argv[])
        -:   41:{
        -:   42:    // setup variables
        -:   43:    struct gameState state;
        1:   44:    int k[10] = { adventurer, council_room, cutpurse, embargo, gardens, minion, mine, village, smithy, tribute };
        1:   45:    int numPlayers = 2;
        1:   46:    int seed = 1000;
        -:   47:
        1:   48:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
call    0 returned 100%
        1:   49:    printf("----------------- NOTE: SOME TESTS FAIL DUE TO THE VERY BUGGY BASE DOMINION CODE ----------------\n");
call    0 returned 100%
        1:   50:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:   51:
        -:   52:    // initialize the game
        1:   53:    initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:   54:
        -:   55:    // set province count = 0.. check for game over, should be yes (1)
        1:   56:    state.supplyCount[province] = 0;
        1:   57:    asserttrue(isGameOver(&state), "Province Count 0 - End Game");
call    0 returned 100%
call    1 returned 100%
        -:   58:    
        -:   59:    // set province count to 1.. check for game over, should be no (0)
        1:   60:    state.supplyCount[province] = 1;
        1:   61:    asserttrue(isGameOver(&state) == 0 , "Province Count 1 - Game Not Over");
call    0 returned 100%
call    1 returned 100%
        -:   62:
        -:   63:    // set first 3 cards to 0, rest to non-zero number.. check for game over, should be yes (1)
        1:   64:    state.supplyCount[province] = 1;
        -:   65:    int i;
       28:   66:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   67:    {
       27:   68:        if (i < 3)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        3:   69:            state.supplyCount[i] = 0;
        -:   70:        else
       24:   71:            state.supplyCount[i] = 1;
        -:   72:    }
        1:   73:    asserttrue(isGameOver(&state), "First 3 cards set to 0 supply - End Game");
call    0 returned 100%
call    1 returned 100%
        -:   74:
        -:   75:    // NOTE THAT THIS FAILS BECAUSE THERE IS A BUG IN THE BASE DOMINION CODE: isGameOver() only iterates from 0 to 25, not length of CARD ENUM
        -:   76:    // set last 3 cards to 0, rest to non-zero number.. check for game over, should be yes (1)
        1:   77:    state.supplyCount[province] = 1;
       28:   78:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   79:    {   
       27:   80:        if (i > treasure_map - 3)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        3:   81:            state.supplyCount[i] = 0;
        -:   82:        else
       24:   83:            state.supplyCount[i] = 1;
        -:   84:        //printf("Card: %d\t Count: %d\n", i, state.supplyCount[i]);
        -:   85:    }
        1:   86:    asserttrue(isGameOver(&state), "Last 3 cards set to 0 supply - End Game");
call    0 returned 100%
call    1 returned 100%
        -:   87:
        -:   88:    // NOTE THAT THIS FAILS BECAUSE THERE IS A BUG IN THE BASE DOMINION CODE: isGameOver() only iterates from 0 to 25, not length of CARD ENUM
        -:   89:    // set first, random, and last cards to 0, rest to non-zero number.. check for game over, should be yes (1)
        1:   90:    state.supplyCount[province] = 1;
        1:   91:    srand(time(0));
call    0 returned 100%
call    1 returned 100%
        1:   92:    int randPos = rand() % (treasure_map) + 1;
call    0 returned 100%
       28:   93:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   94:    {
       27:   95:        if (i == randPos || i == 0 || i == treasure_map)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
        3:   96:            state.supplyCount[i] = 0;
        -:   97:        else
       24:   98:            state.supplyCount[i] = 1;
        -:   99:        //printf("Card: %d\t Count: %d\n", i, state.supplyCount[i]);
        -:  100:    }
        1:  101:    asserttrue(isGameOver(&state), "First, Random, and Last cards set to 0 supply - End Game");
call    0 returned 100%
call    1 returned 100%
        -:  102:
        -:  103:    // set all cards to 1 (> 0) check for game over, should be no (0)
        1:  104:    state.supplyCount[province] = 1;
       28:  105:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  106:    {
       27:  107:        state.supplyCount[i] = 1;
        -:  108:    }
        1:  109:    asserttrue(isGameOver(&state) == 0, "All cards set to 1 - Game Not Over");
call    0 returned 100%
call    1 returned 100%
        -:  110:
        1:  111:    return 0;
        -:  112:}
        -:  113:
function asserttrue called 6 returned 100% blocks executed 100%
        6:  114:void asserttrue(int value, char* test)
        -:  115:{
        6:  116:    if (value)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  117:    {
        4:  118:        printf("Test: %s successful!\n", test);
call    0 returned 100%
        4:  119:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  120:    }
        -:  121:    else
        -:  122:    {
        2:  123:        printf("Test: %s failed!\n", test);
call    0 returned 100%
        2:  124:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  125:    }
        6:  126:}
