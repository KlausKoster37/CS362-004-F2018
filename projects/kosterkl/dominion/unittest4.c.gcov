        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: unittest1.c
        -:    4:* Function under test: kingdomCards()
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:/************************************************************
        -:   21:                    kingdomCards()
        -:   22:
        -:   23:Expected behavior: returns int array that matches a given array (passed to the function)
        -:   24:
        -:   25:Input:
        -:   26:    9 integers
        -:   27:
        -:   28:Output:
        -:   29:    integer array of those 9 values
        -:   30:************************************************************/
        -:   31:
        -:   32:#define TESTFUNCTION "kingdomCards()"
        -:   33:#define TESTARRAYSIZE 10
        -:   34:// global easy testing arrays
        -:   35:char* gameCardNames[treasure_map + 1];
        -:   36:
        -:   37:void asserttrue(int value, char* test, int before, int after);
        -:   38:
function main called 1 returned 100% blocks executed 100%
        1:   39:int main(int argc, char* argv[])
        -:   40:{
        -:   41:    // setup variables
        1:   42:    int originalValues[TESTARRAYSIZE] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        -:   43:
        -:   44:    // setup names
        1:   45:    gameCardNames[0] = "curse";
        1:   46:    gameCardNames[1] = "estate";
        1:   47:    gameCardNames[2] = "duchy";
        1:   48:    gameCardNames[3] = "province";
        1:   49:    gameCardNames[4] = "copper";
        1:   50:    gameCardNames[5] = "silver";
        1:   51:    gameCardNames[6] = "gold";
        1:   52:    gameCardNames[7] = "adventurer";
        1:   53:    gameCardNames[8] = "council_room";
        1:   54:    gameCardNames[9] = "feast";
        1:   55:    gameCardNames[10] = "gardens";
        -:   56:
        1:   57:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
call    0 returned 100%
        1:   58:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:   59:
        -:   60:    // call function to get return array with values
        1:   61:    int *testArray = kingdomCards(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
call    0 returned 100%
        -:   62:
        -:   63:    // test values against the original ones
        -:   64:    int i;
       11:   65:    for (i = 0; i < TESTARRAYSIZE; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   66:    {
       10:   67:        asserttrue(originalValues[i] == *(testArray + i), gameCardNames[i], originalValues[i], *(testArray + i));
call    0 returned 100%
        -:   68:    }
        -:   69:
        1:   70:    return 0;
        -:   71:}
        -:   72:
function asserttrue called 10 returned 100% blocks executed 60%
       10:   73:void asserttrue(int value, char* test, int before, int after)
        -:   74:{
       10:   75:    if (value)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   76:    {
       10:   77:        printf("Test: %s successful!\n", test);
call    0 returned 100%
       10:   78:        printf("Original: %d\tNew: %d\n", before, after);
call    0 returned 100%
       10:   79:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        printf("Test: %s failed!\n", test);
call    0 never executed
    #####:   84:        printf("Original: %d\tNew: %d\n", before, after);
call    0 never executed
    #####:   85:        fflush(stdout);
call    0 never executed
call    1 never executed
        -:   86:    }
       10:   87:}
