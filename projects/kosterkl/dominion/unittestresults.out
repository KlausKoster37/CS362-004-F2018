----------------- Testing Card: Smity ----------------
Test: Card played successful!
Before: 0	After: 0
Test: Hand Count failed!
Before: 5	After: 8
Test: Deck Count failed!
Before: 5	After: 1
Test: Played Card Count successful!
Before: 0	After: 1
Test: Number of Actions Count successful!
Before: 1	After: 1
Test: Number of Buys Count successful!
Before: 1	After: 1
Test: Game Card Count for: curse successful!
Before: 10	After: 10
Test: Game Card Count for: estate successful!
Before: 8	After: 8
Test: Game Card Count for: duchy successful!
Before: 8	After: 8
Test: Game Card Count for: province successful!
Before: 8	After: 8
Test: Game Card Count for: copper successful!
Before: 46	After: 46
Test: Game Card Count for: silver successful!
Before: 40	After: 40
Test: Game Card Count for: gold successful!
Before: 30	After: 30
Test: Game Card Count for: adventurer successful!
Before: 10	After: 10
Test: Game Card Count for: council_room successful!
Before: 10	After: 10
Test: Game Card Count for: feast successful!
Before: -1	After: -1
Test: Game Card Count for: gardens successful!
Before: 8	After: 8
Test: Game Card Count for: mine successful!
Before: 10	After: 10
Test: Game Card Count for: remodel successful!
Before: -1	After: -1
Test: Game Card Count for: smithy successful!
Before: 10	After: 10
Test: Game Card Count for: village successful!
Before: 10	After: 10
Test: Game Card Count for: baron successful!
Before: -1	After: -1
Test: Game Card Count for: great_hall successful!
Before: -1	After: -1
Test: Game Card Count for: minion successful!
Before: 10	After: 10
Test: Game Card Count for: steward successful!
Before: -1	After: -1
Test: Game Card Count for: tribute successful!
Before: 10	After: 10
Test: Game Card Count for: ambassador successful!
Before: -1	After: -1
Test: Game Card Count for: cutpurse successful!
Before: 10	After: 10
Test: Game Card Count for: embargo successful!
Before: 10	After: 10
Test: Game Card Count for: outpost successful!
Before: -1	After: -1
Test: Game Card Count for: salvager successful!
Before: -1	After: -1
Test: Game Card Count for: sea_hag successful!
Before: -1	After: -1
Test: Game Card Count for: treasure_map successful!
Before: -1	After: -1
----------------- Testing Card: Adventurer ----------------
Test: Card played successful!
Before: 0	After: 0
Test: Hand Count successful!
Before: 5	After: 7
Test: Played Card Count failed!
Before: 0	After: 0
Test: Number of Actions Count successful!
Before: 1	After: 1
Test: Number of Buys Count successful!
Before: 1	After: 1
Test: Game Card Count for: curse successful!
Before: 10	After: 10
Test: Game Card Count for: estate successful!
Before: 8	After: 8
Test: Game Card Count for: duchy successful!
Before: 8	After: 8
Test: Game Card Count for: province successful!
Before: 8	After: 8
Test: Game Card Count for: copper successful!
Before: 46	After: 46
Test: Game Card Count for: silver successful!
Before: 40	After: 40
Test: Game Card Count for: gold successful!
Before: 30	After: 30
Test: Game Card Count for: adventurer successful!
Before: 10	After: 10
Test: Game Card Count for: council_room successful!
Before: 10	After: 10
Test: Game Card Count for: feast successful!
Before: -1	After: -1
Test: Game Card Count for: gardens successful!
Before: 8	After: 8
Test: Game Card Count for: mine successful!
Before: 10	After: 10
Test: Game Card Count for: remodel successful!
Before: -1	After: -1
Test: Game Card Count for: smithy successful!
Before: 10	After: 10
Test: Game Card Count for: village successful!
Before: 10	After: 10
Test: Game Card Count for: baron successful!
Before: -1	After: -1
Test: Game Card Count for: great_hall successful!
Before: -1	After: -1
Test: Game Card Count for: minion successful!
Before: 10	After: 10
Test: Game Card Count for: steward successful!
Before: -1	After: -1
Test: Game Card Count for: tribute successful!
Before: 10	After: 10
Test: Game Card Count for: ambassador successful!
Before: -1	After: -1
Test: Game Card Count for: cutpurse successful!
Before: 10	After: 10
Test: Game Card Count for: embargo successful!
Before: 10	After: 10
Test: Game Card Count for: outpost successful!
Before: -1	After: -1
Test: Game Card Count for: salvager successful!
Before: -1	After: -1
Test: Game Card Count for: sea_hag successful!
Before: -1	After: -1
Test: Game Card Count for: treasure_map successful!
Before: -1	After: -1
----------------- Testing Card: Council Room ----------------
Test: Card played successful!
Before: 0	After: 0
Test: Hand Count successful!
Before: 5	After: 8
Test: Deck Count successful!
Before: 5	After: 1
Test: Played Card Count failed!
Before: 0	After: 0
Test: Number of Actions Count successful!
Before: 1	After: 1
Test: Number of Buys Count successful!
Before: 1	After: 2
Test: Game Card Count for: curse successful!
Before: 10	After: 10
Test: Game Card Count for: estate successful!
Before: 8	After: 8
Test: Game Card Count for: duchy successful!
Before: 8	After: 8
Test: Game Card Count for: province successful!
Before: 8	After: 8
Test: Game Card Count for: copper successful!
Before: 46	After: 46
Test: Game Card Count for: silver successful!
Before: 40	After: 40
Test: Game Card Count for: gold successful!
Before: 30	After: 30
Test: Game Card Count for: adventurer successful!
Before: 10	After: 10
Test: Game Card Count for: council_room successful!
Before: 10	After: 10
Test: Game Card Count for: feast successful!
Before: -1	After: -1
Test: Game Card Count for: gardens successful!
Before: 8	After: 8
Test: Game Card Count for: mine successful!
Before: 10	After: 10
Test: Game Card Count for: remodel successful!
Before: -1	After: -1
Test: Game Card Count for: smithy successful!
Before: 10	After: 10
Test: Game Card Count for: village successful!
Before: 10	After: 10
Test: Game Card Count for: baron successful!
Before: -1	After: -1
Test: Game Card Count for: great_hall successful!
Before: -1	After: -1
Test: Game Card Count for: minion successful!
Before: 10	After: 10
Test: Game Card Count for: steward successful!
Before: -1	After: -1
Test: Game Card Count for: tribute successful!
Before: 10	After: 10
Test: Game Card Count for: ambassador successful!
Before: -1	After: -1
Test: Game Card Count for: cutpurse successful!
Before: 10	After: 10
Test: Game Card Count for: embargo successful!
Before: 10	After: 10
Test: Game Card Count for: outpost successful!
Before: -1	After: -1
Test: Game Card Count for: salvager successful!
Before: -1	After: -1
Test: Game Card Count for: sea_hag successful!
Before: -1	After: -1
Test: Game Card Count for: treasure_map successful!
Before: -1	After: -1
----------------- Testing Card: Village ----------------
Test: Card played successful!
Before: 0	After: 0
Test: Hand Count successful!
Before: 5	After: 5
Test: Deck Count successful!
Before: 5	After: 4
Test: Played Card Count successful!
Before: 0	After: 1
Test: Number of Actions Count successful!
Before: 1	After: 3
Test: Number of Buys Count successful!
Before: 1	After: 1
Test: Game Card Count for: curse successful!
Before: 10	After: 10
Test: Game Card Count for: estate successful!
Before: 8	After: 8
Test: Game Card Count for: duchy successful!
Before: 8	After: 8
Test: Game Card Count for: province successful!
Before: 8	After: 8
Test: Game Card Count for: copper successful!
Before: 46	After: 46
Test: Game Card Count for: silver successful!
Before: 40	After: 40
Test: Game Card Count for: gold successful!
Before: 30	After: 30
Test: Game Card Count for: adventurer successful!
Before: 10	After: 10
Test: Game Card Count for: council_room successful!
Before: 10	After: 10
Test: Game Card Count for: feast successful!
Before: -1	After: -1
Test: Game Card Count for: gardens successful!
Before: 8	After: 8
Test: Game Card Count for: mine successful!
Before: 10	After: 10
Test: Game Card Count for: remodel successful!
Before: -1	After: -1
Test: Game Card Count for: smithy successful!
Before: 10	After: 10
Test: Game Card Count for: village successful!
Before: 10	After: 10
Test: Game Card Count for: baron successful!
Before: -1	After: -1
Test: Game Card Count for: great_hall successful!
Before: -1	After: -1
Test: Game Card Count for: minion successful!
Before: 10	After: 10
Test: Game Card Count for: steward successful!
Before: -1	After: -1
Test: Game Card Count for: tribute successful!
Before: 10	After: 10
Test: Game Card Count for: ambassador successful!
Before: -1	After: -1
Test: Game Card Count for: cutpurse successful!
Before: 10	After: 10
Test: Game Card Count for: embargo successful!
Before: 10	After: 10
Test: Game Card Count for: outpost successful!
Before: -1	After: -1
Test: Game Card Count for: salvager successful!
Before: -1	After: -1
Test: Game Card Count for: sea_hag successful!
Before: -1	After: -1
Test: Game Card Count for: treasure_map successful!
Before: -1	After: -1
----------------- Testing Function: isGameOver() ----------------
----------------- NOTE: SOME TESTS FAIL DUE TO THE VERY BUGGY BASE DOMINION CODE ----------------
Test: Province Count 0 - End Game successful!
Test: Province Count 1 - Game Not Over successful!
Test: First 3 cards set to 0 supply - End Game successful!
Test: Last 3 cards set to 0 supply - End Game failed!
Test: First, Random, and Last cards set to 0 supply - End Game failed!
Test: All cards set to 1 - Game Not Over successful!
----------------- Testing Function: getCost() ----------------
Test: curse successful!
Test: estate successful!
Test: duchy successful!
Test: province successful!
Test: copper successful!
Test: silver successful!
Test: gold successful!
Test: adventurer successful!
Test: council_room successful!
Test: feast successful!
Test: gardens successful!
Test: mine successful!
Test: remodel successful!
Test: smithy successful!
Test: village successful!
Test: baron successful!
Test: great_hall successful!
Test: minion successful!
Test: steward successful!
Test: tribute successful!
Test: ambassador successful!
Test: cutpurse successful!
Test: embargo successful!
Test: outpost successful!
Test: salvager successful!
Test: sea_hag successful!
Test: treasure_map successful!
----------------- Testing Function: supplyCount() ----------------
Test: curse successful!
	Supply Count Array: 7	Function: 7
Test: estate successful!
	Supply Count Array: 8	Function: 8
Test: duchy successful!
	Supply Count Array: 9	Function: 9
Test: province successful!
	Supply Count Array: 10	Function: 10
Test: copper successful!
	Supply Count Array: 11	Function: 11
Test: silver successful!
	Supply Count Array: 12	Function: 12
Test: gold successful!
	Supply Count Array: 13	Function: 13
Test: adventurer successful!
	Supply Count Array: 14	Function: 14
Test: council_room successful!
	Supply Count Array: 15	Function: 15
Test: feast successful!
	Supply Count Array: 16	Function: 16
Test: gardens successful!
	Supply Count Array: 17	Function: 17
Test: mine successful!
	Supply Count Array: 18	Function: 18
Test: remodel successful!
	Supply Count Array: 19	Function: 19
Test: smithy successful!
	Supply Count Array: 20	Function: 20
Test: village successful!
	Supply Count Array: 21	Function: 21
Test: baron successful!
	Supply Count Array: 22	Function: 22
Test: great_hall successful!
	Supply Count Array: 23	Function: 23
Test: minion successful!
	Supply Count Array: 24	Function: 24
Test: steward successful!
	Supply Count Array: 25	Function: 25
Test: tribute successful!
	Supply Count Array: 26	Function: 26
Test: ambassador successful!
	Supply Count Array: 27	Function: 27
Test: cutpurse successful!
	Supply Count Array: 28	Function: 28
Test: embargo successful!
	Supply Count Array: 29	Function: 29
Test: outpost successful!
	Supply Count Array: 30	Function: 30
Test: salvager successful!
	Supply Count Array: 31	Function: 31
Test: sea_hag successful!
	Supply Count Array: 32	Function: 32
Test: treasure_map successful!
	Supply Count Array: 33	Function: 33
----------------- Testing Function: kingdomCards() ----------------
Test: curse successful!
Original: 0	New: 0
Test: estate successful!
Original: 1	New: 1
Test: duchy successful!
Original: 2	New: 2
Test: province successful!
Original: 3	New: 3
Test: copper successful!
Original: 4	New: 4
Test: silver successful!
Original: 5	New: 5
Test: gold successful!
Original: 6	New: 6
Test: adventurer successful!
Original: 7	New: 7
Test: council_room successful!
Original: 8	New: 8
Test: feast successful!
Original: 9	New: 9
File 'unittest1.c'
Lines executed:100.00% of 44
Branches executed:100.00% of 20
Taken at least once:100.00% of 20
Calls executed:100.00% of 26
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: unittest1.c
        -:    4:* Function under test: isGameOver()
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:#include <time.h>
        -:   20:
        -:   21:/************************************************************
        -:   22:                isGameOver()
        -:   23:
        -:   24:Expected behavior: returns 1 if game is over, else returns 0
        -:   25:    Note: function checks if province count is zero and (or in terms of the game) if 3 supply piles are zero
        -:   26:
        -:   27:Input:
        -:   28:    struct gameState *state
        -:   29:
        -:   30:Output:
        -:   31:    int (return)
        -:   32:************************************************************/
        -:   33:
        -:   34:#define TESTFUNCTION "isGameOver()"
        -:   35:
        -:   36:// modified assert from cardtests due to the before/after not being necessary.
        -:   37:void asserttrue(int value, char* test);
        -:   38:
        -:   39:
function main called 1 returned 100% blocks executed 100%
        1:   40:int main(int argc, char* argv[])
        -:   41:{
        -:   42:    // setup variables
        -:   43:    struct gameState state;
        1:   44:    int k[10] = { adventurer, council_room, cutpurse, embargo, gardens, minion, mine, village, smithy, tribute };
        1:   45:    int numPlayers = 2;
        1:   46:    int seed = 1000;
        -:   47:
        1:   48:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
call    0 returned 100%
        1:   49:    printf("----------------- NOTE: SOME TESTS FAIL DUE TO THE VERY BUGGY BASE DOMINION CODE ----------------\n");
call    0 returned 100%
        1:   50:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:   51:
        -:   52:    // initialize the game
        1:   53:    initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:   54:
        -:   55:    // set province count = 0.. check for game over, should be yes (1)
        1:   56:    state.supplyCount[province] = 0;
        1:   57:    asserttrue(isGameOver(&state), "Province Count 0 - End Game");
call    0 returned 100%
call    1 returned 100%
        -:   58:    
        -:   59:    // set province count to 1.. check for game over, should be no (0)
        1:   60:    state.supplyCount[province] = 1;
        1:   61:    asserttrue(isGameOver(&state) == 0 , "Province Count 1 - Game Not Over");
call    0 returned 100%
call    1 returned 100%
        -:   62:
        -:   63:    // set first 3 cards to 0, rest to non-zero number.. check for game over, should be yes (1)
        1:   64:    state.supplyCount[province] = 1;
        -:   65:    int i;
       28:   66:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   67:    {
       27:   68:        if (i < 3)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        3:   69:            state.supplyCount[i] = 0;
        -:   70:        else
       24:   71:            state.supplyCount[i] = 1;
        -:   72:    }
        1:   73:    asserttrue(isGameOver(&state), "First 3 cards set to 0 supply - End Game");
call    0 returned 100%
call    1 returned 100%
        -:   74:
        -:   75:    // NOTE THAT THIS FAILS BECAUSE THERE IS A BUG IN THE BASE DOMINION CODE: isGameOver() only iterates from 0 to 25, not length of CARD ENUM
        -:   76:    // set last 3 cards to 0, rest to non-zero number.. check for game over, should be yes (1)
        1:   77:    state.supplyCount[province] = 1;
       28:   78:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   79:    {   
       27:   80:        if (i > treasure_map - 3)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        3:   81:            state.supplyCount[i] = 0;
        -:   82:        else
       24:   83:            state.supplyCount[i] = 1;
        -:   84:        //printf("Card: %d\t Count: %d\n", i, state.supplyCount[i]);
        -:   85:    }
        1:   86:    asserttrue(isGameOver(&state), "Last 3 cards set to 0 supply - End Game");
call    0 returned 100%
call    1 returned 100%
        -:   87:
        -:   88:    // NOTE THAT THIS FAILS BECAUSE THERE IS A BUG IN THE BASE DOMINION CODE: isGameOver() only iterates from 0 to 25, not length of CARD ENUM
        -:   89:    // set first, random, and last cards to 0, rest to non-zero number.. check for game over, should be yes (1)
        1:   90:    state.supplyCount[province] = 1;
        1:   91:    srand(time(0));
call    0 returned 100%
call    1 returned 100%
        1:   92:    int randPos = rand() % (treasure_map) + 1;
call    0 returned 100%
       28:   93:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   94:    {
       27:   95:        if (i == randPos || i == 0 || i == treasure_map)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
        3:   96:            state.supplyCount[i] = 0;
        -:   97:        else
       24:   98:            state.supplyCount[i] = 1;
        -:   99:        //printf("Card: %d\t Count: %d\n", i, state.supplyCount[i]);
        -:  100:    }
        1:  101:    asserttrue(isGameOver(&state), "First, Random, and Last cards set to 0 supply - End Game");
call    0 returned 100%
call    1 returned 100%
        -:  102:
        -:  103:    // set all cards to 1 (> 0) check for game over, should be no (0)
        1:  104:    state.supplyCount[province] = 1;
       28:  105:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  106:    {
       27:  107:        state.supplyCount[i] = 1;
        -:  108:    }
        1:  109:    asserttrue(isGameOver(&state) == 0, "All cards set to 1 - Game Not Over");
call    0 returned 100%
call    1 returned 100%
        -:  110:
        1:  111:    return 0;
        -:  112:}
        -:  113:
function asserttrue called 6 returned 100% blocks executed 100%
        6:  114:void asserttrue(int value, char* test)
        -:  115:{
        6:  116:    if (value)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  117:    {
        4:  118:        printf("Test: %s successful!\n", test);
call    0 returned 100%
        4:  119:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  120:    }
        -:  121:    else
        -:  122:    {
        2:  123:        printf("Test: %s failed!\n", test);
call    0 returned 100%
        2:  124:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  125:    }
        6:  126:}
File 'unittest2.c'
Lines executed:96.97% of 66
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:72.73% of 11
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: unittest2.c
        -:    4:* Function under test: getCost()
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:/************************************************************
        -:   21:                    getCost()
        -:   22:
        -:   23:Expected behavior: returns cost of card passed to it the function
        -:   24:
        -:   25:Input:
        -:   26:    int cardNumber
        -:   27:
        -:   28:Output:
        -:   29:    cost in integer form
        -:   30:************************************************************/
        -:   31:
        -:   32:#define TESTFUNCTION "getCost()"
        -:   33:
        -:   34:// global easy testing arrays
        -:   35:char* gameCardNames[treasure_map + 1];
        -:   36:int cardCosts[treasure_map + 1];
        -:   37:
        -:   38:// modified assert from cardtests due to the before/after not being necessary.
        -:   39:void asserttrue(int value, char* test);
        -:   40:
function main called 1 returned 100% blocks executed 100%
        1:   41:int main(int argc, char* argv[])
        -:   42:{
        1:   43:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
call    0 returned 100%
        1:   44:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:   45:
        -:   46:    // setup names
        1:   47:    gameCardNames[0] = "curse";
        1:   48:    gameCardNames[1] = "estate";
        1:   49:    gameCardNames[2] = "duchy";
        1:   50:    gameCardNames[3] = "province";
        1:   51:    gameCardNames[4] = "copper";
        1:   52:    gameCardNames[5] = "silver";
        1:   53:    gameCardNames[6] = "gold";
        1:   54:    gameCardNames[7] = "adventurer";
        1:   55:    gameCardNames[8] = "council_room";
        1:   56:    gameCardNames[9] = "feast";
        1:   57:    gameCardNames[10] = "gardens";
        1:   58:    gameCardNames[11] = "mine";
        1:   59:    gameCardNames[12] = "remodel";
        1:   60:    gameCardNames[13] = "smithy";
        1:   61:    gameCardNames[14] = "village";
        1:   62:    gameCardNames[15] = "baron";
        1:   63:    gameCardNames[16] = "great_hall";
        1:   64:    gameCardNames[17] = "minion";
        1:   65:    gameCardNames[18] = "steward";
        1:   66:    gameCardNames[19] = "tribute";
        1:   67:    gameCardNames[20] = "ambassador";
        1:   68:    gameCardNames[21] = "cutpurse";
        1:   69:    gameCardNames[22] = "embargo";
        1:   70:    gameCardNames[23] = "outpost";
        1:   71:    gameCardNames[24] = "salvager";
        1:   72:    gameCardNames[25] = "sea_hag";
        1:   73:    gameCardNames[26] = "treasure_map";
        -:   74:
        -:   75:    // setup costs
        1:   76:    cardCosts[0] = 0;
        1:   77:    cardCosts[1] = 2;
        1:   78:    cardCosts[2] = 5;
        1:   79:    cardCosts[3] = 8;
        1:   80:    cardCosts[4] = 0;
        1:   81:    cardCosts[5] = 3;
        1:   82:    cardCosts[6] = 6;
        1:   83:    cardCosts[7] = 6;
        1:   84:    cardCosts[8] = 5;
        1:   85:    cardCosts[9] = 4;
        1:   86:    cardCosts[10] = 4;
        1:   87:    cardCosts[11] = 5;
        1:   88:    cardCosts[12] = 4;
        1:   89:    cardCosts[13] = 4;
        1:   90:    cardCosts[14] = 3;
        1:   91:    cardCosts[15] = 4;
        1:   92:    cardCosts[16] = 3;
        1:   93:    cardCosts[17] = 5;
        1:   94:    cardCosts[18] = 3;
        1:   95:    cardCosts[19] = 5;
        1:   96:    cardCosts[20] = 3;
        1:   97:    cardCosts[21] = 4;
        1:   98:    cardCosts[22] = 2;
        1:   99:    cardCosts[23] = 5;
        1:  100:    cardCosts[24] = 4;
        1:  101:    cardCosts[25] = 4;
        1:  102:    cardCosts[26] = 4;
        -:  103:
        -:  104:    // test all costs
        -:  105:    int i;
       28:  106:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  107:    {
        -:  108:        // note that we can use i instead of the card name because the order is the exact same as the enum
       27:  109:        asserttrue(getCost(i) == cardCosts[i], gameCardNames[i]);
call    0 returned 100%
call    1 returned 100%
        -:  110:    }
        -:  111:
        -:  112:}
        -:  113:
function asserttrue called 27 returned 100% blocks executed 63%
       27:  114:void asserttrue(int value, char* test)
        -:  115:{
       27:  116:    if (value)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  117:    {
       27:  118:        printf("Test: %s successful!\n", test);
call    0 returned 100%
       27:  119:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  120:    }
        -:  121:    else
        -:  122:    {
    #####:  123:        printf("Test: %s failed!\n", test);
call    0 never executed
    #####:  124:        fflush(stdout);
call    0 never executed
call    1 never executed
        -:  125:    }
       27:  126:}
File 'unittest3.c'
Lines executed:93.62% of 47
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:73.33% of 15
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: unittest1.c
        -:    4:* Function under test: supplyCount()
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:
        -:   21:/************************************************************
        -:   22:                supplyCount()
        -:   23:
        -:   24:Expected behavior: returns number of a specific card remaining in the supply
        -:   25:
        -:   26:Input:
        -:   27:    int card
        -:   28:    struct gameState *state
        -:   29:
        -:   30:Output:
        -:   31:    integer value of the number of X cards remaining in the supply
        -:   32:************************************************************/
        -:   33:
        -:   34:#define TESTFUNCTION "supplyCount()"
        -:   35:
        -:   36:// global easy testing arrays
        -:   37:char* gameCardNames[treasure_map + 1];
        -:   38:
        -:   39:// modified assert from cardtests due to the before/after not being necessary.
        -:   40:void asserttrue(int value, char* test, int arrayValue, int functionValue);
        -:   41:
function main called 1 returned 100% blocks executed 100%
        1:   42:int main(int argc, char* argv[])
        -:   43:{
        -:   44:    // setup variables
        -:   45:    struct gameState state;
        1:   46:    int k[10] = { adventurer, council_room, cutpurse, embargo, gardens, minion, mine, village, smithy, tribute };
        1:   47:    int numPlayers = 2;
        1:   48:    int seed = 1000;
        -:   49:
        1:   50:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
call    0 returned 100%
        1:   51:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:   52:
        -:   53:    // setup names
        1:   54:    gameCardNames[0] = "curse";
        1:   55:    gameCardNames[1] = "estate";
        1:   56:    gameCardNames[2] = "duchy";
        1:   57:    gameCardNames[3] = "province";
        1:   58:    gameCardNames[4] = "copper";
        1:   59:    gameCardNames[5] = "silver";
        1:   60:    gameCardNames[6] = "gold";
        1:   61:    gameCardNames[7] = "adventurer";
        1:   62:    gameCardNames[8] = "council_room";
        1:   63:    gameCardNames[9] = "feast";
        1:   64:    gameCardNames[10] = "gardens";
        1:   65:    gameCardNames[11] = "mine";
        1:   66:    gameCardNames[12] = "remodel";
        1:   67:    gameCardNames[13] = "smithy";
        1:   68:    gameCardNames[14] = "village";
        1:   69:    gameCardNames[15] = "baron";
        1:   70:    gameCardNames[16] = "great_hall";
        1:   71:    gameCardNames[17] = "minion";
        1:   72:    gameCardNames[18] = "steward";
        1:   73:    gameCardNames[19] = "tribute";
        1:   74:    gameCardNames[20] = "ambassador";
        1:   75:    gameCardNames[21] = "cutpurse";
        1:   76:    gameCardNames[22] = "embargo";
        1:   77:    gameCardNames[23] = "outpost";
        1:   78:    gameCardNames[24] = "salvager";
        1:   79:    gameCardNames[25] = "sea_hag";
        1:   80:    gameCardNames[26] = "treasure_map";
        -:   81:
        -:   82:    // initialize the game
        1:   83:    initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:   84:
        -:   85:    // test all supply counts
        -:   86:    int i;
       28:   87:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   88:    {
       27:   89:        state.supplyCount[i] = i + 7;
       27:   90:        asserttrue(supplyCount(i, &state) == (i + 7), gameCardNames[i], state.supplyCount[i], supplyCount(i, &state));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   91:    }
        -:   92:
        1:   93:    return 0;
        -:   94:}
        -:   95:
        -:   96:
function asserttrue called 27 returned 100% blocks executed 60%
       27:   97:void asserttrue(int value, char* test, int arrayValue, int functionValue)
        -:   98:{
       27:   99:    if (value)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  100:    {
       27:  101:        printf("Test: %s successful!\n", test);
call    0 returned 100%
       27:  102:        printf("\tSupply Count Array: %d\tFunction: %d\n", arrayValue, functionValue);
call    0 returned 100%
       27:  103:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  104:    }
        -:  105:    else
        -:  106:    {
    #####:  107:        printf("Test: %s failed!\n", test);
call    0 never executed
    #####:  108:        printf("\tSupply Count Array: %d\tFunction: %d\n", arrayValue, functionValue);
call    0 never executed
    #####:  109:        fflush(stdout);
call    0 never executed
call    1 never executed
        -:  110:    }
       27:  111:}
File 'unittest4.c'
Lines executed:89.29% of 28
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:69.23% of 13
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: unittest1.c
        -:    4:* Function under test: kingdomCards()
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:/************************************************************
        -:   21:                    kingdomCards()
        -:   22:
        -:   23:Expected behavior: returns int array that matches a given array (passed to the function)
        -:   24:
        -:   25:Input:
        -:   26:    9 integers
        -:   27:
        -:   28:Output:
        -:   29:    integer array of those 9 values
        -:   30:************************************************************/
        -:   31:
        -:   32:#define TESTFUNCTION "kingdomCards()"
        -:   33:#define TESTARRAYSIZE 10
        -:   34:// global easy testing arrays
        -:   35:char* gameCardNames[treasure_map + 1];
        -:   36:
        -:   37:void asserttrue(int value, char* test, int before, int after);
        -:   38:
function main called 1 returned 100% blocks executed 100%
        1:   39:int main(int argc, char* argv[])
        -:   40:{
        -:   41:    // setup variables
        1:   42:    int originalValues[TESTARRAYSIZE] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        -:   43:
        -:   44:    // setup names
        1:   45:    gameCardNames[0] = "curse";
        1:   46:    gameCardNames[1] = "estate";
        1:   47:    gameCardNames[2] = "duchy";
        1:   48:    gameCardNames[3] = "province";
        1:   49:    gameCardNames[4] = "copper";
        1:   50:    gameCardNames[5] = "silver";
        1:   51:    gameCardNames[6] = "gold";
        1:   52:    gameCardNames[7] = "adventurer";
        1:   53:    gameCardNames[8] = "council_room";
        1:   54:    gameCardNames[9] = "feast";
        1:   55:    gameCardNames[10] = "gardens";
        -:   56:
        1:   57:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
call    0 returned 100%
        1:   58:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:   59:
        -:   60:    // call function to get return array with values
        1:   61:    int *testArray = kingdomCards(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
call    0 returned 100%
        -:   62:
        -:   63:    // test values against the original ones
        -:   64:    int i;
       11:   65:    for (i = 0; i < TESTARRAYSIZE; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   66:    {
       10:   67:        asserttrue(originalValues[i] == *(testArray + i), gameCardNames[i], originalValues[i], *(testArray + i));
call    0 returned 100%
        -:   68:    }
        -:   69:
        1:   70:    return 0;
        -:   71:}
        -:   72:
function asserttrue called 10 returned 100% blocks executed 60%
       10:   73:void asserttrue(int value, char* test, int before, int after)
        -:   74:{
       10:   75:    if (value)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   76:    {
       10:   77:        printf("Test: %s successful!\n", test);
call    0 returned 100%
       10:   78:        printf("Original: %d\tNew: %d\n", before, after);
call    0 returned 100%
       10:   79:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        printf("Test: %s failed!\n", test);
call    0 never executed
    #####:   84:        printf("Original: %d\tNew: %d\n", before, after);
call    0 never executed
    #####:   85:        fflush(stdout);
call    0 never executed
call    1 never executed
        -:   86:    }
       10:   87:}
File 'cardtest1.c'
Lines executed:100.00% of 77
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 22
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: cardtest1.c
        -:    4:* Card in Test: smithy
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:/************************************************************
        -:   21:					SMITHY
        -:   22:
        -:   23:Expected behavior: Draw (+) 3 cards from the user's deck.
        -:   24:    Note: in playSmithy, we also discard 1 card because we played smithy. So, hand +3 -2 = positive 2 card gain
        -:   25:
        -:   26:Input:
        -:   27:	int currentPlayer,
        -:   28:	int handPos,
        -:   29:	struct gameState *state
        -:   30:
        -:   31:Output:
        -:   32:	int (return 0)
        -:   33:************************************************************/
        -:   34:
        -:   35:#define TESTCARD "Smity"
        -:   36:
        -:   37:struct compareGame
        -:   38:{
        -:   39:    int handCount;
        -:   40:    int deckCount;
        -:   41:    int playedCardCount;
        -:   42:	int playedSuccessfully;
        -:   43:    int numActions;
        -:   44:    int numBuys;
        -:   45:
        -:   46:    // this represents ALL game cards (both victory and regular kingdom cards)
        -:   47:    // So, iterating over the entire things is checking all the cards in the game for state changes
        -:   48:    int gameCards[treasure_map + 1];
        -:   49:    char* gameCardNames[treasure_map + 1];
        -:   50:};
        -:   51:
        -:   52:void asserttrue(int value, char* test, int before, int after);
        -:   53:
        -:   54:
function main called 1 returned 100% blocks executed 100%
        1:   55:int main(int argc, char* argv[])
        -:   56:{
        -:   57:	// setup our variables/things necessary to start and play the game/card
        -:   58:    struct gameState state;
        -:   59:    struct compareGame before;
        -:   60:    struct compareGame after;
        1:   61:    before.gameCardNames[0] = "curse";
        1:   62:    before.gameCardNames[1] = "estate";
        1:   63:    before.gameCardNames[2] = "duchy";
        1:   64:    before.gameCardNames[3] = "province";
        1:   65:    before.gameCardNames[4] = "copper";
        1:   66:    before.gameCardNames[5] = "silver";
        1:   67:    before.gameCardNames[6] = "gold";
        1:   68:    before.gameCardNames[7] = "adventurer";
        1:   69:    before.gameCardNames[8] = "council_room";
        1:   70:    before.gameCardNames[9] = "feast";
        1:   71:    before.gameCardNames[10] = "gardens";
        1:   72:    before.gameCardNames[11] = "mine";
        1:   73:    before.gameCardNames[12] = "remodel";
        1:   74:    before.gameCardNames[13] = "smithy";
        1:   75:    before.gameCardNames[14] = "village";
        1:   76:    before.gameCardNames[15] = "baron";
        1:   77:    before.gameCardNames[16] = "great_hall";
        1:   78:    before.gameCardNames[17] = "minion";
        1:   79:    before.gameCardNames[18] = "steward";
        1:   80:    before.gameCardNames[19] = "tribute";
        1:   81:    before.gameCardNames[20] = "ambassador";
        1:   82:    before.gameCardNames[21] = "cutpurse";
        1:   83:    before.gameCardNames[22] = "embargo";
        1:   84:    before.gameCardNames[23] = "outpost";
        1:   85:    before.gameCardNames[24] = "salvager";
        1:   86:    before.gameCardNames[25] = "sea_hag";
        1:   87:    before.gameCardNames[26] = "treasure_map";
        1:   88:    int k[10] = {adventurer, council_room, cutpurse, embargo, gardens, minion, mine, village, smithy, tribute};
        1:   89:    int numPlayers = 2;
        1:   90:    int handPosition = 0;
        1:   91:    int seed = 1000;
        -:   92:    // no choices or bonus for smithy card
        1:   93:    int choice1 = 0;
        1:   94:    int choice2 = 0;
        1:   95:    int choice3 = 0;
        1:   96:    int bonus = 0;
        -:   97:    char gameCardString[100];
        -:   98:
        1:   99:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        1:  100:	fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  101:
        -:  102:	// initialize the game
        1:  103:	initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:  104:
        -:  105:	// get initial state of the game before playing smithy
        1:  106:	before.handCount = numHandCards(&state);
call    0 returned 100%
        1:  107:	before.deckCount = state.deckCount[0];		// player 0's (1st player) deck count
        1:  108:	before.playedCardCount = state.playedCardCount;
        1:  109:	before.numActions = state.numActions;
        1:  110:    before.playedSuccessfully = 0;
        1:  111:    before.numBuys = state.numBuys;
        -:  112:    
        1:  113:    int i = 0;
       28:  114:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  115:    {
       27:  116:        before.gameCards[i] = state.supplyCount[i];
        -:  117:    }
        -:  118:
        -:  119:    // play smithy card
        1:  120:    after.playedSuccessfully = cardEffect(smithy, choice1, choice2, choice3, &state, handPosition, &bonus);
call    0 returned 100%
        1:  121:    asserttrue(before.playedSuccessfully == after.playedSuccessfully, "Card played", before.playedSuccessfully, after.playedSuccessfully);
call    0 returned 100%
        -:  122:
        -:  123:    // update test struct after playing
        1:  124:    after.handCount = numHandCards(&state);
call    0 returned 100%
        1:  125:    after.deckCount = state.deckCount[0];
        1:  126:    after.playedCardCount = state.playedCardCount;
        1:  127:    after.numActions = state.numActions;
        1:  128:    after.numBuys = state.numBuys;
        -:  129:
       28:  130:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  131:    {
       27:  132:        after.gameCards[i] = state.supplyCount[i];
        -:  133:    }
        -:  134:
        -:  135:    // begin assertions and printing results
        -:  136:    // note that first two fail because of the bug I introduced in assignment 2
        1:  137:    asserttrue((after.handCount - before.handCount) == 2, "Hand Count", before.handCount, after.handCount);     // +3, discard 1
call    0 returned 100%
        1:  138:    asserttrue((before.deckCount - after.deckCount) == 3, "Deck Count", before.deckCount, after.deckCount);
call    0 returned 100%
        1:  139:    asserttrue((after.playedCardCount - before.playedCardCount) == 1, "Played Card Count", before.playedCardCount, after.playedCardCount);
call    0 returned 100%
        1:  140:    asserttrue((before.numActions - after.numActions) == 0, "Number of Actions Count", before.numActions, after.numActions);
call    0 returned 100%
        1:  141:    asserttrue(before.numBuys == after.numBuys, "Number of Buys Count", before.numBuys, after.numBuys);
call    0 returned 100%
        -:  142:
       28:  143:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  144:    {
       27:  145:        memset(gameCardString, '\0', 100 * sizeof(char));
       27:  146:        strcpy(gameCardString, "Game Card Count for: ");
       27:  147:        strcat(gameCardString, before.gameCardNames[i]);
       27:  148:        asserttrue(before.gameCards[i] == after.gameCards[i], gameCardString, before.gameCards[i], after.gameCards[i]);
call    0 returned 100%
        -:  149:    }
        -:  150:
        1:  151:	return 0;
        -:  152:}
        -:  153:
        -:  154:
function asserttrue called 33 returned 100% blocks executed 100%
       33:  155:void asserttrue(int value, char* test, int before, int after)
        -:  156:{
       33:  157:    if (value)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
        -:  158:    {
       31:  159:        printf("Test: %s successful!\n", test);
call    0 returned 100%
       31:  160:        printf("Before: %d\tAfter: %d\n", before, after);
call    0 returned 100%
       31:  161:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  162:    }
        -:  163:    else
        -:  164:    {
        2:  165:        printf("Test: %s failed!\n", test);
call    0 returned 100%
        2:  166:        printf("Before: %d\tAfter: %d\n", before, after);
call    0 returned 100%
        2:  167:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  168:    }
       33:  169:}
File 'cardtest2.c'
Lines executed:100.00% of 76
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 21
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: cardtest2.c
        -:    4:* Card in Test: adventurer
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:/************************************************************
        -:   21:            ADVENTURER
        -:   22:
        -:   23:Expected behavior: Draw cards until getting 2 additional treasure cards. Discard the other non-treasure drawn cards.
        -:   24:
        -:   25:Input:
        -:   26:    int currentPlayer,
        -:   27:    int temphand[]
        -:   28:    struct gameState *state
        -:   29:
        -:   30:Output:
        -:   31:    int (return 0)
        -:   32:************************************************************/
        -:   33:
        -:   34:#define TESTCARD "Adventurer"
        -:   35:
        -:   36:
        -:   37:struct compareGame
        -:   38:{
        -:   39:    int handCount;
        -:   40:    int deckCount;
        -:   41:    int playedCardCount;
        -:   42:    int playedSuccessfully;
        -:   43:    int numActions;
        -:   44:    int numBuys;
        -:   45:
        -:   46:    // this represents ALL game cards (both victory and regular kingdom cards)
        -:   47:    // So, iterating over the entire things is checking all the cards in the game for state changes
        -:   48:    int gameCards[treasure_map + 1];
        -:   49:    char* gameCardNames[treasure_map + 1];
        -:   50:};
        -:   51:
        -:   52:void asserttrue(int value, char* test, int before, int after);
        -:   53:
        -:   54:
function main called 1 returned 100% blocks executed 100%
        1:   55:int main(int argc, char* argv[])
        -:   56:{
        -:   57:    // setup our variables/things necessary to start and play the game/card
        -:   58:    struct gameState state;
        -:   59:    struct compareGame before;
        -:   60:    struct compareGame after;
        1:   61:    before.gameCardNames[0] = "curse";
        1:   62:    before.gameCardNames[1] = "estate";
        1:   63:    before.gameCardNames[2] = "duchy";
        1:   64:    before.gameCardNames[3] = "province";
        1:   65:    before.gameCardNames[4] = "copper";
        1:   66:    before.gameCardNames[5] = "silver";
        1:   67:    before.gameCardNames[6] = "gold";
        1:   68:    before.gameCardNames[7] = "adventurer";
        1:   69:    before.gameCardNames[8] = "council_room";
        1:   70:    before.gameCardNames[9] = "feast";
        1:   71:    before.gameCardNames[10] = "gardens";
        1:   72:    before.gameCardNames[11] = "mine";
        1:   73:    before.gameCardNames[12] = "remodel";
        1:   74:    before.gameCardNames[13] = "smithy";
        1:   75:    before.gameCardNames[14] = "village";
        1:   76:    before.gameCardNames[15] = "baron";
        1:   77:    before.gameCardNames[16] = "great_hall";
        1:   78:    before.gameCardNames[17] = "minion";
        1:   79:    before.gameCardNames[18] = "steward";
        1:   80:    before.gameCardNames[19] = "tribute";
        1:   81:    before.gameCardNames[20] = "ambassador";
        1:   82:    before.gameCardNames[21] = "cutpurse";
        1:   83:    before.gameCardNames[22] = "embargo";
        1:   84:    before.gameCardNames[23] = "outpost";
        1:   85:    before.gameCardNames[24] = "salvager";
        1:   86:    before.gameCardNames[25] = "sea_hag";
        1:   87:    before.gameCardNames[26] = "treasure_map";
        1:   88:    int k[10] = { adventurer, council_room, cutpurse, embargo, gardens, minion, mine, village, smithy, tribute };
        1:   89:    int numPlayers = 2;
        1:   90:    int handPosition = 0;
        1:   91:    int seed = 1000;
        -:   92:    // no choices or bonus for smithy card
        1:   93:    int choice1 = 0;
        1:   94:    int choice2 = 0;
        1:   95:    int choice3 = 0;
        1:   96:    int bonus = 0;
        -:   97:    char gameCardString[100];
        -:   98:
        1:   99:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        1:  100:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  101:
        -:  102:    // initialize the game
        1:  103:    initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:  104:
        -:  105:    // get initial state of the game before playing smithy
        1:  106:    before.handCount = numHandCards(&state);
call    0 returned 100%
        1:  107:    before.deckCount = state.deckCount[0];		// player 0's (1st player) deck count
        1:  108:    before.playedCardCount = state.playedCardCount;
        1:  109:    before.numActions = state.numActions;
        1:  110:    before.playedSuccessfully = 0;
        1:  111:    before.numBuys = state.numBuys;
        -:  112:
        1:  113:    int i = 0;
       28:  114:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  115:    {
       27:  116:        before.gameCards[i] = state.supplyCount[i];
        -:  117:    }
        -:  118:
        -:  119:    // play smithy card
        1:  120:    after.playedSuccessfully = cardEffect(adventurer, choice1, choice2, choice3, &state, handPosition, &bonus);
call    0 returned 100%
        1:  121:    asserttrue(before.playedSuccessfully == after.playedSuccessfully, "Card played", before.playedSuccessfully, after.playedSuccessfully);
call    0 returned 100%
        -:  122:
        -:  123:    // update test struct after playing
        1:  124:    after.handCount = numHandCards(&state);
call    0 returned 100%
        1:  125:    after.deckCount = state.deckCount[0];
        1:  126:    after.playedCardCount = state.playedCardCount;
        1:  127:    after.numActions = state.numActions;
        1:  128:    after.numBuys = state.numBuys;
        -:  129:
       28:  130:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  131:    {
       27:  132:        after.gameCards[i] = state.supplyCount[i];
        -:  133:    }
        -:  134:
        -:  135:    // begin assertions and printing results
        1:  136:    asserttrue((after.handCount - before.handCount) == 2, "Hand Count", before.handCount, after.handCount);
call    0 returned 100%
        -:  137:    // removed deck count as this could be any number of cards removed from the deck
        -:  138:    // possible bug in played card count in adventurer as well - this never calls discard card, thus playedcards doesn't get incremented.  Leaving test in as a good test!
        1:  139:    asserttrue((after.playedCardCount - before.playedCardCount) == 1, "Played Card Count", before.playedCardCount, after.playedCardCount);
call    0 returned 100%
        1:  140:    asserttrue((before.numActions - after.numActions) == 0, "Number of Actions Count", before.numActions, after.numActions);
call    0 returned 100%
        1:  141:    asserttrue(before.numBuys == after.numBuys, "Number of Buys Count", before.numBuys, after.numBuys);
call    0 returned 100%
        -:  142:
       28:  143:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  144:    {
       27:  145:        memset(gameCardString, '\0', 100 * sizeof(char));
       27:  146:        strcpy(gameCardString, "Game Card Count for: ");
       27:  147:        strcat(gameCardString, before.gameCardNames[i]);
       27:  148:        asserttrue(before.gameCards[i] == after.gameCards[i], gameCardString, before.gameCards[i], after.gameCards[i]);
call    0 returned 100%
        -:  149:    }
        -:  150:
        1:  151:    return 0;
        -:  152:}
        -:  153:
function asserttrue called 32 returned 100% blocks executed 100%
       32:  154:void asserttrue(int value, char* test, int before, int after)
        -:  155:{
       32:  156:    if (value)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:  157:    {
       31:  158:        printf("Test: %s successful!\n", test);
call    0 returned 100%
       31:  159:        printf("Before: %d\tAfter: %d\n", before, after);
call    0 returned 100%
       31:  160:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  161:    }
        -:  162:    else
        -:  163:    {
        1:  164:        printf("Test: %s failed!\n", test);
call    0 returned 100%
        1:  165:        printf("Before: %d\tAfter: %d\n", before, after);
call    0 returned 100%
        1:  166:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  167:    }
       32:  168:}
File 'cardtest3.c'
Lines executed:100.00% of 77
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 22
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: cardtest3.c
        -:    4:* Card in Test: council room
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:/************************************************************
        -:   21:            COUNCIL ROOM
        -:   22:
        -:   23:Expected behavior: Draw 4 cards, +1 Buy, each other player draws a card
        -:   24:    Note: +3 cards (+4, discard 1)
        -:   25:
        -:   26:Input:
        -:   27:    int currentPlayer,
        -:   28:    int handPos,
        -:   29:    struct gameState *state
        -:   30:
        -:   31:Output:
        -:   32:    int (return 0)
        -:   33:************************************************************/
        -:   34:
        -:   35:#define TESTCARD "Council Room"
        -:   36:
        -:   37:
        -:   38:struct compareGame
        -:   39:{
        -:   40:    int handCount;
        -:   41:    int deckCount;
        -:   42:    int playedCardCount;
        -:   43:    int playedSuccessfully;
        -:   44:    int numActions;
        -:   45:    int numBuys;
        -:   46:
        -:   47:    // this represents ALL game cards (both victory and regular kingdom cards)
        -:   48:    // So, iterating over the entire things is checking all the cards in the game for state changes
        -:   49:    int gameCards[treasure_map + 1];
        -:   50:    char* gameCardNames[treasure_map + 1];
        -:   51:};
        -:   52:
        -:   53:void asserttrue(int value, char* test, int before, int after);
        -:   54:
        -:   55:
function main called 1 returned 100% blocks executed 100%
        1:   56:int main(int argc, char* argv[])
        -:   57:{
        -:   58:    // setup our variables/things necessary to start and play the game/card
        -:   59:    struct gameState state;
        -:   60:    struct compareGame before;
        -:   61:    struct compareGame after;
        1:   62:    before.gameCardNames[0] = "curse";
        1:   63:    before.gameCardNames[1] = "estate";
        1:   64:    before.gameCardNames[2] = "duchy";
        1:   65:    before.gameCardNames[3] = "province";
        1:   66:    before.gameCardNames[4] = "copper";
        1:   67:    before.gameCardNames[5] = "silver";
        1:   68:    before.gameCardNames[6] = "gold";
        1:   69:    before.gameCardNames[7] = "adventurer";
        1:   70:    before.gameCardNames[8] = "council_room";
        1:   71:    before.gameCardNames[9] = "feast";
        1:   72:    before.gameCardNames[10] = "gardens";
        1:   73:    before.gameCardNames[11] = "mine";
        1:   74:    before.gameCardNames[12] = "remodel";
        1:   75:    before.gameCardNames[13] = "smithy";
        1:   76:    before.gameCardNames[14] = "village";
        1:   77:    before.gameCardNames[15] = "baron";
        1:   78:    before.gameCardNames[16] = "great_hall";
        1:   79:    before.gameCardNames[17] = "minion";
        1:   80:    before.gameCardNames[18] = "steward";
        1:   81:    before.gameCardNames[19] = "tribute";
        1:   82:    before.gameCardNames[20] = "ambassador";
        1:   83:    before.gameCardNames[21] = "cutpurse";
        1:   84:    before.gameCardNames[22] = "embargo";
        1:   85:    before.gameCardNames[23] = "outpost";
        1:   86:    before.gameCardNames[24] = "salvager";
        1:   87:    before.gameCardNames[25] = "sea_hag";
        1:   88:    before.gameCardNames[26] = "treasure_map";
        1:   89:    int k[10] = { adventurer, council_room, cutpurse, embargo, gardens, minion, mine, village, smithy, tribute };
        1:   90:    int numPlayers = 2;
        1:   91:    int handPosition = 0;
        1:   92:    int seed = 1000;
        -:   93:    // no choices or bonus for council room card
        1:   94:    int choice1 = 0;
        1:   95:    int choice2 = 0;
        1:   96:    int choice3 = 0;
        1:   97:    int bonus = 0;
        -:   98:    char gameCardString[100];
        -:   99:
        1:  100:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        1:  101:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  102:
        -:  103:    // initialize the game
        1:  104:    initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:  105:
        -:  106:    // get initial state of the game before playing smithy
        1:  107:    before.handCount = numHandCards(&state);
call    0 returned 100%
        1:  108:    before.deckCount = state.deckCount[0];		// player 0's (1st player) deck count
        1:  109:    before.playedCardCount = state.playedCardCount;
        1:  110:    before.numActions = state.numActions;
        1:  111:    before.playedSuccessfully = 0;
        1:  112:    before.numBuys = state.numBuys;
        -:  113:
        1:  114:    int i = 0;
       28:  115:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  116:    {
       27:  117:        before.gameCards[i] = state.supplyCount[i];
        -:  118:    }
        -:  119:
        -:  120:    // play smithy card
        1:  121:    after.playedSuccessfully = cardEffect(council_room, choice1, choice2, choice3, &state, handPosition, &bonus);
call    0 returned 100%
        1:  122:    asserttrue(before.playedSuccessfully == after.playedSuccessfully, "Card played", before.playedSuccessfully, after.playedSuccessfully);
call    0 returned 100%
        -:  123:
        -:  124:    // update test struct after playing
        1:  125:    after.handCount = numHandCards(&state);
call    0 returned 100%
        1:  126:    after.deckCount = state.deckCount[0];
        1:  127:    after.playedCardCount = state.playedCardCount;
        1:  128:    after.numActions = state.numActions;
        1:  129:    after.numBuys = state.numBuys;
        -:  130:
       28:  131:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  132:    {
       27:  133:        after.gameCards[i] = state.supplyCount[i];
        -:  134:    }
        -:  135:
        -:  136:    // begin assertions and printing results
        -:  137:    // note that bug 3 is caught via the played card count since we altered the trash flag, the state played card count doesn't increase
        1:  138:    asserttrue((after.handCount - before.handCount) == 3, "Hand Count", before.handCount, after.handCount);
call    0 returned 100%
        1:  139:    asserttrue((before.deckCount - after.deckCount) == 4, "Deck Count", before.deckCount, after.deckCount);
call    0 returned 100%
        1:  140:    asserttrue((after.playedCardCount - before.playedCardCount) == 1, "Played Card Count", before.playedCardCount, after.playedCardCount);
call    0 returned 100%
        1:  141:    asserttrue((before.numActions - after.numActions) == 0, "Number of Actions Count", before.numActions, after.numActions);
call    0 returned 100%
        1:  142:    asserttrue((after.numBuys - before.numBuys) == 1, "Number of Buys Count", before.numBuys, after.numBuys);
call    0 returned 100%
        -:  143:
       28:  144:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  145:    {
       27:  146:        memset(gameCardString, '\0', 100 * sizeof(char));
       27:  147:        strcpy(gameCardString, "Game Card Count for: ");
       27:  148:        strcat(gameCardString, before.gameCardNames[i]);
       27:  149:        asserttrue(before.gameCards[i] == after.gameCards[i], gameCardString, before.gameCards[i], after.gameCards[i]);
call    0 returned 100%
        -:  150:    }
        -:  151:
        1:  152:    return 0;
        -:  153:}
        -:  154:
function asserttrue called 33 returned 100% blocks executed 100%
       33:  155:void asserttrue(int value, char* test, int before, int after)
        -:  156:{
       33:  157:    if (value)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:  158:    {
       32:  159:        printf("Test: %s successful!\n", test);
call    0 returned 100%
       32:  160:        printf("Before: %d\tAfter: %d\n", before, after);
call    0 returned 100%
       32:  161:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  162:    }
        -:  163:    else
        -:  164:    {
        1:  165:        printf("Test: %s failed!\n", test);
call    0 returned 100%
        1:  166:        printf("Before: %d\tAfter: %d\n", before, after);
call    0 returned 100%
        1:  167:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  168:    }
       33:  169:}
File 'cardtest4.c'
Lines executed:96.10% of 77
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:81.82% of 22
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*******************************************************************
        -:    2:* Assignment 3: Unit Testing
        -:    3:* File: cardtest4.c
        -:    4:* Card in Test: village
        -:    5:*
        -:    6:* Author: Klaus Koster (kosterkl)
        -:    7:* Due Date: 10/28/2018
        -:    8:* CS 362, Fall 2018
        -:    9:*******************************************************************/
        -:   10:
        -:   11:// include files
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "interface.h"
        -:   15:#include "rngs.h"
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:/************************************************************
        -:   21:                VILLAGE
        -:   22:
        -:   23:Expected behavior: Draw (+) 1 card from user's deck, +2 actions
        -:   24:
        -:   25:Input:
        -:   26:    int currentPlayer,
        -:   27:    int handPos,
        -:   28:    struct gameState *state
        -:   29:
        -:   30:Output:
        -:   31:    int (return 0)
        -:   32:************************************************************/
        -:   33:
        -:   34:#define TESTCARD "Village"
        -:   35:
        -:   36:
        -:   37:struct compareGame
        -:   38:{
        -:   39:    int handCount;
        -:   40:    int deckCount;
        -:   41:    int playedCardCount;
        -:   42:    int playedSuccessfully;
        -:   43:    int numActions;
        -:   44:    int numBuys;
        -:   45:
        -:   46:    // this represents ALL game cards (both victory and regular kingdom cards)
        -:   47:    // So, iterating over the entire things is checking all the cards in the game for state changes
        -:   48:    int gameCards[treasure_map + 1];
        -:   49:    char* gameCardNames[treasure_map + 1];
        -:   50:};
        -:   51:
        -:   52:void asserttrue(int value, char* test, int before, int after);
        -:   53:
        -:   54:
function main called 1 returned 100% blocks executed 100%
        1:   55:int main(int argc, char* argv[])
        -:   56:{
        -:   57:    // setup our variables/things necessary to start and play the game/card
        -:   58:    struct gameState state;
        -:   59:    struct compareGame before;
        -:   60:    struct compareGame after;
        1:   61:    before.gameCardNames[0] = "curse";
        1:   62:    before.gameCardNames[1] = "estate";
        1:   63:    before.gameCardNames[2] = "duchy";
        1:   64:    before.gameCardNames[3] = "province";
        1:   65:    before.gameCardNames[4] = "copper";
        1:   66:    before.gameCardNames[5] = "silver";
        1:   67:    before.gameCardNames[6] = "gold";
        1:   68:    before.gameCardNames[7] = "adventurer";
        1:   69:    before.gameCardNames[8] = "council_room";
        1:   70:    before.gameCardNames[9] = "feast";
        1:   71:    before.gameCardNames[10] = "gardens";
        1:   72:    before.gameCardNames[11] = "mine";
        1:   73:    before.gameCardNames[12] = "remodel";
        1:   74:    before.gameCardNames[13] = "smithy";
        1:   75:    before.gameCardNames[14] = "village";
        1:   76:    before.gameCardNames[15] = "baron";
        1:   77:    before.gameCardNames[16] = "great_hall";
        1:   78:    before.gameCardNames[17] = "minion";
        1:   79:    before.gameCardNames[18] = "steward";
        1:   80:    before.gameCardNames[19] = "tribute";
        1:   81:    before.gameCardNames[20] = "ambassador";
        1:   82:    before.gameCardNames[21] = "cutpurse";
        1:   83:    before.gameCardNames[22] = "embargo";
        1:   84:    before.gameCardNames[23] = "outpost";
        1:   85:    before.gameCardNames[24] = "salvager";
        1:   86:    before.gameCardNames[25] = "sea_hag";
        1:   87:    before.gameCardNames[26] = "treasure_map";
        1:   88:    int k[10] = { adventurer, council_room, cutpurse, embargo, gardens, minion, mine, village, smithy, tribute };
        1:   89:    int numPlayers = 2;
        1:   90:    int handPosition = 0;
        1:   91:    int seed = 1000;
        -:   92:    // no choices or bonus for smithy card
        1:   93:    int choice1 = 0;
        1:   94:    int choice2 = 0;
        1:   95:    int choice3 = 0;
        1:   96:    int bonus = 0;
        -:   97:    char gameCardString[100];
        -:   98:
        1:   99:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        1:  100:    fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  101:
        -:  102:    // initialize the game
        1:  103:    initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:  104:
        -:  105:    // get initial state of the game before playing smithy
        1:  106:    before.handCount = numHandCards(&state);
call    0 returned 100%
        1:  107:    before.deckCount = state.deckCount[0];		// player 0's (1st player) deck count
        1:  108:    before.playedCardCount = state.playedCardCount;
        1:  109:    before.numActions = state.numActions;
        1:  110:    before.playedSuccessfully = 0;
        1:  111:    before.numBuys = state.numBuys;
        -:  112:
        1:  113:    int i = 0;
       28:  114:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  115:    {
       27:  116:        before.gameCards[i] = state.supplyCount[i];
        -:  117:    }
        -:  118:
        -:  119:    // play smithy card
        1:  120:    after.playedSuccessfully = cardEffect(village, choice1, choice2, choice3, &state, handPosition, &bonus);
call    0 returned 100%
        1:  121:    asserttrue(before.playedSuccessfully == after.playedSuccessfully, "Card played", before.playedSuccessfully, after.playedSuccessfully);
call    0 returned 100%
        -:  122:
        -:  123:    // update test struct after playing
        1:  124:    after.handCount = numHandCards(&state);
call    0 returned 100%
        1:  125:    after.deckCount = state.deckCount[0];
        1:  126:    after.playedCardCount = state.playedCardCount;
        1:  127:    after.numActions = state.numActions;
        1:  128:    after.numBuys = state.numBuys;
        -:  129:
       28:  130:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  131:    {
       27:  132:        after.gameCards[i] = state.supplyCount[i];
        -:  133:    }
        -:  134:
        -:  135:    // begin assertions and printing results
        1:  136:    asserttrue((after.handCount - before.handCount) == 0, "Hand Count", before.handCount, after.handCount);
call    0 returned 100%
        1:  137:    asserttrue((before.deckCount - after.deckCount) == 1, "Deck Count", before.deckCount, after.deckCount);
call    0 returned 100%
        1:  138:    asserttrue((after.playedCardCount - before.playedCardCount) == 1, "Played Card Count", before.playedCardCount, after.playedCardCount);
call    0 returned 100%
        1:  139:    asserttrue((after.numActions - before.numActions) == 2, "Number of Actions Count", before.numActions, after.numActions);
call    0 returned 100%
        1:  140:    asserttrue(before.numBuys == after.numBuys, "Number of Buys Count", before.numBuys, after.numBuys);
call    0 returned 100%
        -:  141:
       28:  142:    for (i = 0; i < treasure_map + 1; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  143:    {
       27:  144:        memset(gameCardString, '\0', 100 * sizeof(char));
       27:  145:        strcpy(gameCardString, "Game Card Count for: ");
       27:  146:        strcat(gameCardString, before.gameCardNames[i]);
       27:  147:        asserttrue(before.gameCards[i] == after.gameCards[i], gameCardString, before.gameCards[i], after.gameCards[i]);
call    0 returned 100%
        -:  148:    }
        -:  149:
        1:  150:    return 0;
        -:  151:}
        -:  152:
function asserttrue called 33 returned 100% blocks executed 60%
       33:  153:void asserttrue(int value, char* test, int before, int after)
        -:  154:{
       33:  155:    if (value)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  156:    {
       33:  157:        printf("Test: %s successful!\n", test);
call    0 returned 100%
       33:  158:        printf("Before: %d\tAfter: %d\n", before, after);
call    0 returned 100%
       33:  159:        fflush(stdout);
call    0 returned 100%
call    1 returned 100%
        -:  160:    }
        -:  161:    else
        -:  162:    {
    #####:  163:        printf("Test: %s failed!\n", test);
call    0 never executed
    #####:  164:        printf("Before: %d\tAfter: %d\n", before, after);
call    0 never executed
    #####:  165:        fflush(stdout);
call    0 never executed
call    1 never executed
        -:  166:    }
       33:  167:}
Function 'playFeast'
Lines executed:0.00% of 17
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 5

Function 'playVillage'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'playCouncilRoom'
Lines executed:100.00% of 10
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'playAdventurer'
Lines executed:66.67% of 18
Branches executed:66.67% of 12
Taken at least once:41.67% of 12
Calls executed:50.00% of 2

Function 'playSmithy'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:8.22% of 219
Branches executed:13.61% of 169
Taken at least once:2.96% of 169
Calls executed:9.09% of 55

Function 'getCost'
Lines executed:98.25% of 57
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:100.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:38.44% of 614
Branches executed:35.25% of 417
Taken at least once:26.38% of 417
Calls executed:22.11% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 168 returned 100% blocks executed 83%
      168:    8:int compare(const void* a, const void* b) {
      168:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      168:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
       60:   12:    return -1;
      108:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 1 returned 100% blocks executed 100%
        1:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 88%
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
call    0 returned 100%
        6:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       54:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       30:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 12 returned 100% blocks executed 94%
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      420:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      300:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 8 returned 100% blocks executed 100%
        8:  311:int numHandCards(struct gameState *state) {
        8:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 54 returned 100% blocks executed 100%
       54:  320:int supplyCount(int card, struct gameState *state) {
       54:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 12 returned 100% blocks executed 100%
       12:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 42 returned 100% blocks executed 38%
       42:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       42:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       42:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       42:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       42:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       42:  576:    state->deckCount[player]--;
       42:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       42:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 97%
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        1:  587:    case curse:
        1:  588:      return 0;
        1:  589:    case estate:
        1:  590:      return 2;
        1:  591:    case duchy:
        1:  592:      return 5;
        1:  593:    case province:
        1:  594:      return 8;
        1:  595:    case copper:
        1:  596:      return 0;
        1:  597:    case silver:
        1:  598:      return 3;
        1:  599:    case gold:
        1:  600:      return 6;
        1:  601:    case adventurer:
        1:  602:      return 6;
        1:  603:    case council_room:
        1:  604:      return 5;
        1:  605:    case feast:
        1:  606:      return 4;
        1:  607:    case gardens:
        1:  608:      return 4;
        1:  609:    case mine:
        1:  610:      return 5;
        1:  611:    case remodel:
        1:  612:      return 4;
        1:  613:    case smithy:
        1:  614:      return 4;
        1:  615:    case village:
        1:  616:      return 3;
        1:  617:    case baron:
        1:  618:      return 4;
        1:  619:    case great_hall:
        1:  620:      return 3;
        1:  621:    case minion:
        1:  622:      return 5;
        1:  623:    case steward:
        1:  624:      return 3;
        1:  625:    case tribute:
        1:  626:      return 5;
        1:  627:    case ambassador:
        1:  628:      return 3;
        1:  629:    case cutpurse:
        1:  630:      return 4;
        1:  631:    case embargo: 
        1:  632:      return 2;
        1:  633:    case outpost:
        1:  634:      return 5;
        1:  635:    case salvager:
        1:  636:      return 4;
        1:  637:    case sea_hag:
        1:  638:      return 4;
        1:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 6%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
        4:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
        4:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        4:  657:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  658:    nextPlayer = 0;
        -:  659:  }
        -:  660:  
        -:  661:	
        -:  662:  //uses switch to select card and perform actions
        4:  663:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  664:    {
        1:  665:    case adventurer:
        -:  666:      // play adventurer card
        1:  667:      playAdventurer(currentPlayer, temphand, state);
call    0 returned 100%
        1:  668:      return 0;
        -:  669:			
        1:  670:    case council_room:   
        -:  671:      // play council room card
        1:  672:      playCouncilRoom(currentPlayer, handPos, state);
call    0 returned 100%
        1:  673:      return 0;
        -:  674:			
    #####:  675:    case feast:
        -:  676:      // play the feast card
    #####:  677:      playFeast(currentPlayer, choice1, temphand, state);
call    0 never executed
    #####:  678:      return 0;
        -:  679:			
    #####:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:			
    #####:  683:    case mine:
    #####:  684:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  685:
    #####:  686:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  687:	{
    #####:  688:	  return -1;
        -:  689:	}
        -:  690:		
    #####:  691:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  692:	{
    #####:  693:	  return -1;
        -:  694:	}
        -:  695:
    #####:  696:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:
    #####:  701:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  702:
        -:  703:      //discard card from hand
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  705:
        -:  706:      //discard trashed card
    #####:  707:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  708:	{
    #####:  709:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  710:	    {
    #####:  711:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  712:	      break;
        -:  713:	    }
        -:  714:	}
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
    #####:  718:    case remodel:
    #####:  719:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  720:
    #####:  721:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  722:	{
    #####:  723:	  return -1;
        -:  724:	}
        -:  725:
    #####:  726:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  727:
        -:  728:      //discard card from hand
    #####:  729:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  730:
        -:  731:      //discard trashed card
    #####:  732:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  733:	{
    #####:  734:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  735:	    {
    #####:  736:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  737:	      break;
        -:  738:	    }
        -:  739:	}
        -:  740:
        -:  741:
    #####:  742:      return 0;
        -:  743:		
        1:  744:    case smithy:
        -:  745:      // play the Smithy card
        1:  746:      playSmithy(currentPlayer, handPos, state);
call    0 returned 100%
        1:  747:      return 0;
        -:  748:		
        1:  749:    case village:
        -:  750:      // play the village card
        1:  751:      playVillage(currentPlayer, handPos, state);
call    0 returned 100%
        1:  752:      return 0;
        -:  753:		
    #####:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  780:		isGameOver(state);
call    0 never executed
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	    isGameOver(state);
call    0 never executed
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
    #####:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
call    0 never executed
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:		
    #####:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  857:			{
    #####:  858:			  drawCard(i, state);
call    0 never executed
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
    #####:  867:    case steward:
    #####:  868:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  872:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  888:      return 0;
        -:  889:		
    #####:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  939:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  940:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
    #####:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
    #####: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
    #####: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1057:      return 0;
        -: 1058:		
    #####: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1065:      return 0;
        -: 1066:		
    #####: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1081:      return 0;
        -: 1082:		
    #####: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1085:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
    #####: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
        3: 1131:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1132:    {
        -: 1133:      //add card to played pile
        2: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
        3: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
        3: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
    #####: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
        3: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
        3: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
        3: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
        3: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
        3: 1162:  return 0;
        -: 1163:}
        -: 1164:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1170:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1171:    {
    #####: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
    #####: 1180:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1181:    {
    #####: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
    #####: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
    #####: 1199:  return 0;
        -: 1200:}
        -: 1201:
function updateCoins called 6 returned 100% blocks executed 82%
        6: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
        6: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
       36: 1210:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1211:    {
       30: 1212:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1213:	{
       24: 1214:	  state->coins += 1;
        -: 1215:	}
        6: 1216:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
        6: 1220:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
        6: 1227:  state->coins += bonus;
        -: 1228:
        6: 1229:  return 0;
        -: 1230:}
        -: 1231:
        -: 1232:// ******************************************** ADD FUNCTIONS HERE ************************************************
        -: 1233:
        -: 1234:/*********************************************************
        -: 1235: * Name: playSmithy
        -: 1236: * Description: plays the smithy card
        -: 1237: * Operations: draws 3 cards, discard smithy from hand
        -: 1238: * Input parameters: current player (int), hand position of smith (int),
        -: 1239: *                   game state struct pointer
        -: 1240: * Output: returns 0
        -: 1241:*********************************************************/
function playSmithy called 1 returned 100% blocks executed 100%
        1: 1242:int playSmithy(int currentPlayer, int handPos, struct gameState *state)
        -: 1243:{
        -: 1244:  //draw 3 cards
        1: 1245:  int i = 0;
        5: 1246:  for (i = 0; i <= 3; i++)    // changed this to i <= 3 from i < 3.  This will cause smithy to draw 4 cards instead of 3.  BUG 1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1247:	{
        4: 1248:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1249:	}
        -: 1250:			
        -: 1251:  //discard card from hand
        1: 1252:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1253:  
        1: 1254:  return 0;
        -: 1255:}
        -: 1256:
        -: 1257:
        -: 1258:/*********************************************************
        -: 1259: * Name: playAdventurer
        -: 1260: * Description: plays the adventurer card
        -: 1261: * Operations: draw cards until revealing 2 treasure cards and adding them to the players hand,
        -: 1262: *             then discard the non-treasure cards the player drew
        -: 1263: * Input parameters: current player (int), temphand (int array),
        -: 1264: *                   game state struct pointer
        -: 1265: * Output: returns 0
        -: 1266:*********************************************************/
function playAdventurer called 1 returned 100% blocks executed 67%
        1: 1267:int playAdventurer(int currentPlayer,  int temphand[], struct gameState *state)
        -: 1268:{
        -: 1269:  // initialize our drawn treasure and card drawn vars
        1: 1270:  int drawntreasure = 0;
        1: 1271:  int cardDrawn = 0;
        -: 1272:  
        -: 1273:  // temp hand counter
        1: 1274:  int z = 0;
        -: 1275:  
        -: 1276:  // continue to draw new cards until 2 treasure cards have been drawn
        4: 1277:  while(drawntreasure<2)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1278:  {
        -: 1279:    //if the deck is empty we need to shuffle discard and add to deck
        2: 1280:	  if (state->deckCount[currentPlayer] <1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1281:	  {
    #####: 1282:	    shuffle(currentPlayer, state);
call    0 never executed
        -: 1283:	  }
        -: 1284:	  
        -: 1285:	  // draw a card
        2: 1286:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1287:	  
        -: 1288:	  // read the card drawn
        2: 1289:	  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1290:	  
        -: 1291:	  
        2: 1292:	  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2: 1293:	    drawntreasure++;
        -: 1294:	  else
        -: 1295:	  {
    #####: 1296:	    temphand[z]=cardDrawn;
    #####: 1297:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1298:	    z++;
        -: 1299:	  }
        -: 1300:  }
        -: 1301:      
        2: 1302:  while(z-1 > 1)    // introduced bug here with discarding cards  Original: z-1 >= 0, so with z-1 > 1, this never drops to 0 to discard all the cards  BUG 2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1303:  {
    #####: 1304:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1305:	  z = z - 1;
        -: 1306:  }
        -: 1307:  
        1: 1308:  return 0;
        -: 1309:}
        -: 1310:
        -: 1311:
        -: 1312:/*********************************************************
        -: 1313: * Name: playCouncilRoom
        -: 1314: * Description: plays the council room card
        -: 1315: * Operations: player draws 4 cards, increases their buy ability by 1, and every OTHER player draws 1 card
        -: 1316: * Input parameters: current player (int), hand position (int),
        -: 1317: *                   game state struct pointer
        -: 1318: * Output: returns 0
        -: 1319:*********************************************************/
function playCouncilRoom called 1 returned 100% blocks executed 100%
        1: 1320:int playCouncilRoom(int currentPlayer, int handPos, struct gameState *state)
        -: 1321:{
        1: 1322:  int i = 0;
        -: 1323:    
        -: 1324:  // draw 4 cards
        5: 1325:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1326:	{
        4: 1327:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1328:	}
        -: 1329:			
        -: 1330:  //+1 Buy
        1: 1331:  state->numBuys++;
        -: 1332:	
        -: 1333:  //Each other player draws a card
        3: 1334:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1335:	{
        2: 1336:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1337:    {
        1: 1338:	    drawCard(i, state);
call    0 returned 100%
        -: 1339:	  }
        -: 1340:	}
        -: 1341:			
        -: 1342:  //put played card in played card pile
        1: 1343:  discardCard(handPos, currentPlayer, state, 1); // changed the trashed flag to 1. since card is "trashed" it doesn't get added to the played pile in the discardCard function BUG 3
call    0 returned 100%
        -: 1344:                                                 // one interesting note I want to mention here: there doesn't seem to be a remove card from play function. this trash flag doesn't seem to do a whole lot
        1: 1345:  return 0;
        -: 1346:}
        -: 1347:
        -: 1348:/*********************************************************
        -: 1349: * Name: playVillage
        -: 1350: * Description: plays the Village card
        -: 1351: * Operations: player draws 1 card and adds 2 actions to their number of actions allowed to be performed
        -: 1352: * Input parameters: current player (int), hand position (int),
        -: 1353: *                   game state struct pointer
        -: 1354: * Output: returns 0
        -: 1355:*********************************************************/
function playVillage called 1 returned 100% blocks executed 100%
        1: 1356:int playVillage(int currentPlayer, int handPos, struct gameState *state)
        -: 1357:{
        -: 1358:  //+1 Card
        1: 1359:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1360:  
        -: 1361:  //+2 Actions
        1: 1362:  state->numActions = state->numActions + 2;
        -: 1363:  
        -: 1364:  //discard played card from hand
        1: 1365:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1366:  
        1: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:/*********************************************************
        -: 1371: * Name: playFeast
        -: 1372: * Description: plays the Feast card
        -: 1373: * Operations: Feast card goes to trash, player gains one card costing up to 5 treasure and it is added to the discard pile
        -: 1374: * Input parameters: current player (int), choice1 (int), temphand (int array)
        -: 1375: *                   game state struct pointer
        -: 1376: * Output: returns 0
        -: 1377:*********************************************************/
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1378:int playFeast(int currentPlayer, int choice1, int temphand[], struct gameState *state)
        -: 1379:{
        -: 1380:  //gain card with cost up to 5 and back up the player's hand
    #####: 1381:  int i = 0;
    #####: 1382:  for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1383:  {
    #####: 1384:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1385:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1386:  }
        -: 1387:  
        -: 1388:  // update player's buy coins to 5
    #####: 1389:  updateCoins(currentPlayer, state, 5);
call    0 never executed
        -: 1390:  
    #####: 1391:  int x = 1;
    #####: 1392:  while( x < 1)     // changed from == to <.  Now, you can play feast and will never gain a card.  BUG 4
branch  0 never executed
branch  1 never executed
        -: 1393:  {//Buy one card
    #####: 1394:    if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1395:    {
        -: 1396:      if (DEBUG)
        -: 1397:        printf("None of that card left, sorry!\n");
        -: 1398:      
        -: 1399:      if (DEBUG)
        -: 1400:      {
        -: 1401:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1402:      }
        -: 1403:    }
    #####: 1404:    else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1405:    {
    #####: 1406:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1407:
        -: 1408:      if (DEBUG)
        -: 1409:      {
        -: 1410:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1411:      }
        -: 1412:    }
        -: 1413:    else
        -: 1414:    {
        -: 1415:      if (DEBUG)
        -: 1416:      {
        -: 1417:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1418:      }
        -: 1419:
    #####: 1420:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1421:      x = 0;//No more buying cards
        -: 1422:
        -: 1423:      if (DEBUG)
        -: 1424:      {
        -: 1425:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1426:      }
        -: 1427:    }
        -: 1428:  }     
        -: 1429:
        -: 1430:  //Reset Hand
    #####: 1431:  for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1432:  {
    #####: 1433:	  state->hand[currentPlayer][i] = temphand[i];
    #####: 1434:	  temphand[i] = -1;
        -: 1435:  }
        -: 1436:  
    #####: 1437:  return 0;
        -: 1438:}
        -: 1439:
        -: 1440://end of dominion.c
        -: 1441:
